import React, { useEffect, useState } from "react";
import MedicalRecords from "./medicalRecord";
import "../css/patientdashboard.css";
import logo from "../logos/logo.svg";
import slogo from "../logos/logo-wo-text.svg";
import cookie from "js-cookie";
import logoutimg from "../assets/p_dashbord-panel.svg";
import dosageimg from "../assets/dosage-image.svg";
import NoDoc from "../assets/No_data.svg";
import doctor from "../assets/doctor.jpg";
import axios from "axios";
export default class PatientDashboard extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      nav: "medicalrecord",
      userData: JSON.parse(localStorage.getItem("UserData")),
      token: cookie.get("jwt-token"),
    };
  }
  logout() {
    cookie.remove("jwt-token");
    window.location = "/signin";
  }
  componentDidMount() {
    const token = cookie.get("jwt-token");

    if (token === undefined) {
      window.location = "/signin";
    }
  }

  render() {
    return (
      <>
        <div className="patient__dashboard">
          <div className="p_dashboard__left_panel">
            <div className="p_dashboard_logo">
              <img className="blogo" src={logo} alt="logo" />
              <img className="slogo" src={slogo} alt="logo" />
              <div className="p_dashboard__nav">
                <a
                  className={
                    this.state.nav === "medicalrecord" ? "nav-active" : ""
                  }
                  onClick={() => {
                    this.setState({ nav: "medicalrecord" });
                  }}
                >
                  <div className="p_dashboard__nav_a">
                    <svg
                      width="26"
                      height="26"
                      viewBox="0 0 22 22"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        fill-rule="evenodd"
                        clip-rule="evenodd"
                        d="M3.47961 0.600098H3.39961C3.03321 0.600098 2.71801 0.600098 2.43961 0.665698C2.00863 0.768681 1.61457 0.988972 1.3011 1.30216C0.987627 1.61535 0.766981 2.00921 0.663609 2.4401C0.599609 2.7185 0.599609 3.0321 0.599609 3.4001V7.4001C0.599609 7.7665 0.599609 8.0817 0.665209 8.3601C0.768193 8.79108 0.988484 9.18514 1.30167 9.49861C1.61486 9.81208 2.00872 10.0327 2.43961 10.1361C2.71801 10.2001 3.03161 10.2001 3.39961 10.2001H7.39961C7.76601 10.2001 8.08121 10.2001 8.35961 10.1345C8.79059 10.0315 9.18465 9.81122 9.49812 9.49803C9.81159 9.18484 10.0322 8.79099 10.1356 8.3601C10.1996 8.0817 10.1996 7.7681 10.1996 7.4001V3.4001C10.1996 3.0337 10.1996 2.7185 10.134 2.4401C10.031 2.00912 9.81073 1.61506 9.49755 1.30159C9.18436 0.988115 8.7905 0.76747 8.35961 0.664098C8.08121 0.600098 7.76761 0.600098 7.39961 0.600098H3.47961ZM2.81241 2.2225C2.88121 2.2065 2.98841 2.2001 3.47961 2.2001H7.31961C7.81241 2.2001 7.91801 2.2049 7.98681 2.2225C8.13054 2.25687 8.26194 2.33038 8.36643 2.43487C8.47093 2.53937 8.54444 2.67077 8.57881 2.8145C8.59481 2.8817 8.59961 2.9873 8.59961 3.4801V7.3201C8.59961 7.8129 8.59481 7.9185 8.57721 7.9873C8.54284 8.13103 8.46933 8.26242 8.36483 8.36692C8.26034 8.47142 8.12894 8.54493 7.98521 8.5793C7.91961 8.5937 7.81401 8.6001 7.31961 8.6001H3.47961C2.98681 8.6001 2.88121 8.5953 2.81241 8.5777C2.66868 8.54333 2.53728 8.46982 2.43279 8.36532C2.32829 8.26082 2.25478 8.12943 2.22041 7.9857C2.20601 7.9201 2.19961 7.8145 2.19961 7.3201V3.4801C2.19961 2.9873 2.20441 2.8817 2.22201 2.8129C2.25638 2.66917 2.32989 2.53777 2.43439 2.43327C2.53888 2.32878 2.67028 2.25527 2.81401 2.2209L2.81241 2.2225ZM14.6796 0.600098H14.5996C14.2332 0.600098 13.918 0.600098 13.6396 0.665698C13.2086 0.768681 12.8146 0.988972 12.5011 1.30216C12.1876 1.61535 11.967 2.00921 11.8636 2.4401C11.7996 2.7185 11.7996 3.0321 11.7996 3.4001V7.4001C11.7996 7.7665 11.7996 8.0817 11.8652 8.3601C11.9682 8.79108 12.1885 9.18514 12.5017 9.49861C12.8149 9.81208 13.2087 10.0327 13.6396 10.1361C13.918 10.2001 14.2316 10.2001 14.5996 10.2001H18.5996C18.966 10.2001 19.2812 10.2001 19.5596 10.1345C19.9906 10.0315 20.3846 9.81122 20.6981 9.49803C21.0116 9.18484 21.2322 8.79099 21.3356 8.3601C21.3996 8.0817 21.3996 7.7681 21.3996 7.4001V3.4001C21.3996 3.0337 21.3996 2.7185 21.334 2.4401C21.231 2.00912 21.0107 1.61506 20.6975 1.30159C20.3844 0.988115 19.9905 0.76747 19.5596 0.664098C19.2812 0.600098 18.9676 0.600098 18.5996 0.600098H14.6796ZM14.0124 2.2225C14.0812 2.2065 14.1884 2.2001 14.6796 2.2001H18.5196C19.0124 2.2001 19.118 2.2049 19.1868 2.2225C19.3305 2.25687 19.4619 2.33038 19.5664 2.43487C19.6709 2.53937 19.7444 2.67077 19.7788 2.8145C19.7948 2.8817 19.7996 2.9873 19.7996 3.4801V7.3201C19.7996 7.8129 19.7932 7.9185 19.7772 7.9873C19.7428 8.13103 19.6693 8.26242 19.5648 8.36692C19.4603 8.47142 19.3289 8.54493 19.1852 8.5793C19.118 8.5953 19.0124 8.6001 18.5196 8.6001H14.6796C14.1868 8.6001 14.0812 8.5953 14.0124 8.5777C13.8687 8.54333 13.7373 8.46982 13.6328 8.36532C13.5283 8.26082 13.4548 8.12943 13.4204 7.9857C13.406 7.9201 13.3996 7.8145 13.3996 7.3201V3.4801C13.3996 2.9873 13.4044 2.8817 13.422 2.8129C13.4564 2.66917 13.5299 2.53777 13.6344 2.43327C13.7389 2.32878 13.8703 2.25527 14.014 2.2209L14.0124 2.2225ZM3.39961 11.8001H7.39961C7.76601 11.8001 8.08121 11.8001 8.35961 11.8657C8.79059 11.9687 9.18465 12.189 9.49812 12.5022C9.81159 12.8153 10.0322 13.2092 10.1356 13.6401C10.1996 13.9185 10.1996 14.2321 10.1996 14.6001V18.6001C10.1996 18.9665 10.1996 19.2817 10.134 19.5601C10.031 19.9911 9.81073 20.3851 9.49755 20.6986C9.18436 21.0121 8.7905 21.2327 8.35961 21.3361C8.08121 21.4001 7.76761 21.4001 7.39961 21.4001H3.39961C3.03321 21.4001 2.71801 21.4001 2.43961 21.3345C2.00863 21.2315 1.61457 21.0112 1.3011 20.698C0.987627 20.3848 0.766981 19.991 0.663609 19.5601C0.599609 19.2817 0.599609 18.9681 0.599609 18.6001V14.6001C0.599609 14.2337 0.599609 13.9185 0.665209 13.6401C0.768193 13.2091 0.988484 12.8151 1.30167 12.5016C1.61486 12.1881 2.00872 11.9675 2.43961 11.8641C2.71801 11.8001 3.03161 11.8001 3.39961 11.8001ZM3.47961 13.4001C2.98681 13.4001 2.88121 13.4049 2.81241 13.4225C2.66868 13.4569 2.53728 13.5304 2.43279 13.6349C2.32829 13.7394 2.25478 13.8708 2.22041 14.0145C2.20601 14.0801 2.19961 14.1857 2.19961 14.6801V18.5201C2.19961 19.0129 2.20441 19.1185 2.22201 19.1873C2.25638 19.331 2.32989 19.4624 2.43439 19.5669C2.53888 19.6714 2.67028 19.7449 2.81401 19.7793C2.88121 19.7953 2.98681 19.8001 3.47961 19.8001H7.31961C7.81241 19.8001 7.91801 19.7937 7.98681 19.7777C8.13054 19.7433 8.26194 19.6698 8.36643 19.5653C8.47093 19.4608 8.54444 19.3294 8.57881 19.1857C8.59481 19.1185 8.59961 19.0129 8.59961 18.5201V14.6801C8.59961 14.1873 8.59481 14.0817 8.57721 14.0129C8.54284 13.8692 8.46933 13.7378 8.36483 13.6333C8.26034 13.5288 8.12894 13.4553 7.98521 13.4209C7.91961 13.4065 7.81401 13.4001 7.31961 13.4001H3.47961ZM14.6796 11.8001H14.5996C14.2332 11.8001 13.918 11.8001 13.6396 11.8657C13.2086 11.9687 12.8146 12.189 12.5011 12.5022C12.1876 12.8153 11.967 13.2092 11.8636 13.6401C11.7996 13.9185 11.7996 14.2321 11.7996 14.6001V18.6001C11.7996 18.9665 11.7996 19.2817 11.8652 19.5601C11.9682 19.9911 12.1885 20.3851 12.5017 20.6986C12.8149 21.0121 13.2087 21.2327 13.6396 21.3361C13.918 21.4017 14.2332 21.4017 14.5996 21.4017H18.5996C18.966 21.4017 19.2812 21.4017 19.5596 21.3361C19.9903 21.2329 20.384 21.0124 20.6972 20.6993C21.0104 20.3861 21.2308 19.9924 21.334 19.5617C21.3996 19.2833 21.3996 18.9681 21.3996 18.6017V14.6001C21.3996 14.2337 21.3996 13.9185 21.334 13.6401C21.231 13.2091 21.0107 12.8151 20.6975 12.5016C20.3844 12.1881 19.9905 11.9675 19.5596 11.8641C19.2812 11.8001 18.9676 11.8001 18.5996 11.8001H14.6796ZM14.0124 13.4225C14.0812 13.4065 14.1884 13.4001 14.6796 13.4001H18.5196C19.0124 13.4001 19.118 13.4049 19.1868 13.4225C19.3305 13.4569 19.4619 13.5304 19.5664 13.6349C19.6709 13.7394 19.7444 13.8708 19.7788 14.0145C19.7948 14.0817 19.7996 14.1873 19.7996 14.6801V18.5201C19.7996 19.0129 19.7932 19.1185 19.7772 19.1873C19.7428 19.331 19.6693 19.4624 19.5648 19.5669C19.4603 19.6714 19.3289 19.7449 19.1852 19.7793C19.118 19.7953 19.0124 19.8001 18.5196 19.8001H14.6796C14.1868 19.8001 14.0812 19.7937 14.0124 19.7777C13.8687 19.7433 13.7373 19.6698 13.6328 19.5653C13.5283 19.4608 13.4548 19.3294 13.4204 19.1857C13.406 19.1201 13.3996 19.0145 13.3996 18.5201V14.6801C13.3996 14.1873 13.4044 14.0817 13.422 14.0129C13.4564 13.8692 13.5299 13.7378 13.6344 13.6333C13.7389 13.5288 13.8703 13.4553 14.014 13.4209L14.0124 13.4225Z"
                        fill="#535353"
                      />
                    </svg>

                    <p className="dashicon_text-none">Dashboard</p>
                  </div>
                </a>

                <a
                  className={
                    this.state.nav === "doctorslist" ? "nav-active" : ""
                  }
                  onClick={() => {
                    this.setState({ nav: "doctorslist" });
                  }}
                >
                  <div className="p_dashboard__nav_a">
                    {" "}
                    <svg
                      width="34"
                      height="28"
                      viewBox="0 0 34 28"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M29.7494 19.775C27.6244 16.45 25.4994 16.975 23.1619 16.8C23.3744 17.325 23.3744 17.85 23.3744 18.55C26.7744 19.25 27.6244 22.575 27.6244 24.5V26.25H23.3744V24.5H25.4994C25.4994 24.5 25.4994 20.125 22.3119 20.125C19.1244 20.125 19.1244 24.325 19.1244 24.5H21.2494V26.25H16.9994V24.5C16.9994 22.575 17.8494 19.075 21.2494 18.55C21.2494 17.5 21.0369 16.625 20.8244 16.275C20.3994 16.1 19.9744 15.75 19.9744 15.225C19.9744 14.175 21.6744 14.525 22.9494 12.6C22.9494 12.6 24.8619 8.575 24.2244 5.075H22.0994C22.0994 4.725 22.3119 4.55 22.3119 4.2C22.3119 3.85 22.3119 3.675 22.0994 3.325H23.7994C23.1619 1.575 21.0369 0 16.9994 0C12.9619 0 10.8369 1.575 9.98691 3.5H11.6869C11.6869 3.85 11.4744 4.025 11.4744 4.375C11.4744 4.725 11.4744 4.9 11.6869 5.25H9.56191C9.13691 8.75 10.8369 12.775 10.8369 12.775C12.1119 14.525 13.8119 14.175 13.8119 15.4C13.8119 16.275 12.7494 16.625 11.4744 16.8C11.0494 17.15 10.6244 17.85 10.6244 19.25V21.35C11.8994 21.7 12.7494 22.75 12.7494 23.8C12.7494 25.025 11.2619 26.25 9.56191 26.25C7.86191 26.25 6.37441 25.025 6.37441 23.625C6.37441 22.4 7.22441 21.525 8.49941 21.175V19.075C8.49941 18.2 8.71191 17.5 8.92441 16.8C7.43691 16.975 5.73691 17.5 4.24941 19.775C2.97441 21.7 2.33691 28 2.33691 28H31.4494C31.6619 28 31.0244 21.7 29.7494 19.775ZM13.8119 4.375C13.8119 2.975 15.2994 1.75 16.9994 1.75C18.6994 1.75 20.1869 2.975 20.1869 4.375C20.1869 5.775 18.6994 7 16.9994 7C15.2994 7 13.8119 5.775 13.8119 4.375Z"
                        fill="#535353"
                      />
                      <path
                        d="M10.625 23.625C10.625 23.8571 10.5131 24.0796 10.3138 24.2437C10.1145 24.4078 9.84429 24.5 9.5625 24.5C9.28071 24.5 9.01046 24.4078 8.8112 24.2437C8.61194 24.0796 8.5 23.8571 8.5 23.625C8.5 23.3929 8.61194 23.1704 8.8112 23.0063C9.01046 22.8422 9.28071 22.75 9.5625 22.75C9.84429 22.75 10.1145 22.8422 10.3138 23.0063C10.5131 23.1704 10.625 23.3929 10.625 23.625Z"
                        fill="#535353"
                      />
                    </svg>
                    <p className="dashicon_text-none">Doctors</p>
                  </div>
                </a>
                <a
                  className={
                    this.state.nav === "editmedicalrecord"
                      ? "nav-active mlg"
                      : ""
                  }
                  onClick={() => {
                    this.setState({ nav: "editmedicalrecord" });
                  }}
                >
                  {" "}
                  <div className="p_dashboard__nav_a">
                    <svg
                      width="29"
                      height="29"
                      viewBox="0 0 23 27"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M1.83301 3.83329V23.1666C1.83301 23.8076 2.08762 24.4223 2.54083 24.8755C2.99405 25.3287 3.60873 25.5833 4.24967 25.5833H18.7497C19.3906 25.5833 20.0053 25.3287 20.4585 24.8755C20.9117 24.4223 21.1663 23.8076 21.1663 23.1666V9.07988C21.1663 8.75793 21.1019 8.43923 20.977 8.14251C20.8521 7.84578 20.6692 7.577 20.4389 7.35196L15.0739 2.10538C14.6224 1.66392 14.0161 1.4167 13.3847 1.41663H4.24967C3.60873 1.41663 2.99405 1.67124 2.54083 2.12445C2.08762 2.57766 1.83301 3.19235 1.83301 3.83329V3.83329Z"
                        stroke="#535461"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M7.875 14.7083H15.125"
                        stroke="#535461"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M7.875 19.5416H11.5"
                        stroke="#535461"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M13.916 1.41663V6.24996C13.916 6.8909 14.1706 7.50559 14.6238 7.9588C15.0771 8.41201 15.6917 8.66663 16.3327 8.66663H21.166"
                        stroke="#535461"
                        stroke-width="2"
                        stroke-linejoin="round"
                      />
                    </svg>

                    <p className="dashicon_text-none">Medical Records</p>
                  </div>
                </a>
                <a
                  className={
                    this.state.nav === "dosagereminder" ? "nav-active" : ""
                  }
                  onClick={() => {
                    this.setState({ nav: "dosagereminder" });
                  }}
                >
                  {" "}
                  <div className="p_dashboard__nav_a">
                    <svg
                      width="30"
                      height="30"
                      viewBox="0 0 30 30"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M24.5859 8.14746C24.5248 7.95939 24.4057 7.79549 24.2457 7.6792C24.0857 7.56291 23.8931 7.50019 23.6953 7.5H21.5625V4.21875C21.5625 3.7002 21.1436 3.28125 20.625 3.28125H9.375C8.85645 3.28125 8.4375 3.7002 8.4375 4.21875V7.5H6.30469C6.10681 7.49974 5.91395 7.56229 5.7539 7.67864C5.59384 7.795 5.47485 7.95915 5.41406 8.14746L3.28125 14.707V25.7812C3.28125 26.2998 3.7002 26.7188 4.21875 26.7188H25.7812C26.2998 26.7188 26.7188 26.2998 26.7188 25.7812V14.707L24.5859 8.14746ZM19.3359 18.3984C19.3359 18.5273 19.2305 18.6328 19.1016 18.6328H15.9375V21.7969C15.9375 21.9258 15.832 22.0312 15.7031 22.0312H14.2969C14.168 22.0312 14.0625 21.9258 14.0625 21.7969V18.6328H10.8984C10.7695 18.6328 10.6641 18.5273 10.6641 18.3984V16.9922C10.6641 16.8633 10.7695 16.7578 10.8984 16.7578H14.0625V13.5938C14.0625 13.4648 14.168 13.3594 14.2969 13.3594H15.7031C15.832 13.3594 15.9375 13.4648 15.9375 13.5938V16.7578H19.1016C19.2305 16.7578 19.3359 16.8633 19.3359 16.9922V18.3984ZM19.4531 7.5H10.5469V5.39062H19.4531V7.5Z"
                        fill="#535353"
                      />
                    </svg>
                    <p className="dashicon_text-none">Dosage Reminder</p>
                  </div>
                </a>
              </div>
            </div>

            <div className="p_dashboard_logout">
              <img src={logoutimg} />
              <a onClick={this.logout}>
                {" "}
                <div className="p_dashboard__nav_a">
                  <svg
                    width="30"
                    height="30"
                    viewBox="0 0 30 30"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M5.625 28.125H16.875C17.3721 28.1245 17.8488 27.9268 18.2003 27.5753C18.5518 27.2238 18.7495 26.7471 18.75 26.25V23.4375H16.875V26.25H5.625V3.75H16.875V6.5625H18.75V3.75C18.7495 3.25287 18.5518 2.77625 18.2003 2.42472C17.8488 2.0732 17.3721 1.8755 16.875 1.875H5.625C5.12787 1.8755 4.65125 2.0732 4.29972 2.42472C3.9482 2.77625 3.7505 3.25287 3.75 3.75V26.25C3.7505 26.7471 3.9482 27.2238 4.29972 27.5753C4.65125 27.9268 5.12787 28.1245 5.625 28.125Z"
                      fill="black"
                    />
                    <path
                      d="M19.2994 19.2994L22.6613 15.9375H9.375V14.0625H22.6613L19.2994 10.7006L20.625 9.375L26.25 15L20.625 20.625L19.2994 19.2994Z"
                      fill="black"
                    />
                  </svg>
                  <p className="dashicon_text-none">Logout</p>
                </div>
              </a>
            </div>
          </div>
          <div className="bottom_nav_wrap">
            <div className="bottom_nav">
              {" "}
              <a
                className={
                  this.state.nav === "medicalrecord" ? "nav-active" : ""
                }
                onClick={() => {
                  this.setState({ nav: "medicalrecord" });
                }}
              >
                <div className="p_dashboard__nav_a">
                  <svg
                    width="26"
                    height="26"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fill-rule="evenodd"
                      clip-rule="evenodd"
                      d="M4.47961 1.6001H4.39961C4.03321 1.6001 3.71801 1.6001 3.43961 1.6657C3.00863 1.76868 2.61457 1.98897 2.3011 2.30216C1.98763 2.61535 1.76698 3.00921 1.66361 3.4401C1.59961 3.7185 1.59961 4.0321 1.59961 4.4001V8.4001C1.59961 8.7665 1.59961 9.0817 1.66521 9.3601C1.76819 9.79108 1.98848 10.1851 2.30167 10.4986C2.61486 10.8121 3.00872 11.0327 3.43961 11.1361C3.71801 11.2001 4.03161 11.2001 4.39961 11.2001H8.39961C8.76601 11.2001 9.08121 11.2001 9.35961 11.1345C9.79059 11.0315 10.1846 10.8112 10.4981 10.498C10.8116 10.1848 11.0322 9.79099 11.1356 9.3601C11.1996 9.0817 11.1996 8.7681 11.1996 8.4001V4.4001C11.1996 4.0337 11.1996 3.7185 11.134 3.4401C11.031 3.00912 10.8107 2.61506 10.4975 2.30159C10.1844 1.98812 9.7905 1.76747 9.35961 1.6641C9.08121 1.6001 8.76761 1.6001 8.39961 1.6001H4.47961ZM3.81241 3.2225C3.88121 3.2065 3.98841 3.2001 4.47961 3.2001H8.31961C8.81241 3.2001 8.91801 3.2049 8.98681 3.2225C9.13054 3.25687 9.26194 3.33038 9.36643 3.43487C9.47093 3.53937 9.54444 3.67077 9.57881 3.8145C9.59481 3.8817 9.59961 3.9873 9.59961 4.4801V8.3201C9.59961 8.8129 9.59481 8.9185 9.57721 8.9873C9.54284 9.13103 9.46933 9.26242 9.36483 9.36692C9.26034 9.47142 9.12894 9.54493 8.98521 9.5793C8.91961 9.5937 8.81401 9.6001 8.31961 9.6001H4.47961C3.98681 9.6001 3.88121 9.5953 3.81241 9.5777C3.66868 9.54333 3.53728 9.46982 3.43279 9.36532C3.32829 9.26082 3.25478 9.12943 3.22041 8.9857C3.20601 8.9201 3.19961 8.8145 3.19961 8.3201V4.4801C3.19961 3.9873 3.20441 3.8817 3.22201 3.8129C3.25638 3.66917 3.32989 3.53777 3.43439 3.43327C3.53888 3.32878 3.67028 3.25527 3.81401 3.2209L3.81241 3.2225ZM15.6796 1.6001H15.5996C15.2332 1.6001 14.918 1.6001 14.6396 1.6657C14.2086 1.76868 13.8146 1.98897 13.5011 2.30216C13.1876 2.61535 12.967 3.00921 12.8636 3.4401C12.7996 3.7185 12.7996 4.0321 12.7996 4.4001V8.4001C12.7996 8.7665 12.7996 9.0817 12.8652 9.3601C12.9682 9.79108 13.1885 10.1851 13.5017 10.4986C13.8149 10.8121 14.2087 11.0327 14.6396 11.1361C14.918 11.2001 15.2316 11.2001 15.5996 11.2001H19.5996C19.966 11.2001 20.2812 11.2001 20.5596 11.1345C20.9906 11.0315 21.3846 10.8112 21.6981 10.498C22.0116 10.1848 22.2322 9.79099 22.3356 9.3601C22.3996 9.0817 22.3996 8.7681 22.3996 8.4001V4.4001C22.3996 4.0337 22.3996 3.7185 22.334 3.4401C22.231 3.00912 22.0107 2.61506 21.6975 2.30159C21.3844 1.98812 20.9905 1.76747 20.5596 1.6641C20.2812 1.6001 19.9676 1.6001 19.5996 1.6001H15.6796ZM15.0124 3.2225C15.0812 3.2065 15.1884 3.2001 15.6796 3.2001H19.5196C20.0124 3.2001 20.118 3.2049 20.1868 3.2225C20.3305 3.25687 20.4619 3.33038 20.5664 3.43487C20.6709 3.53937 20.7444 3.67077 20.7788 3.8145C20.7948 3.8817 20.7996 3.9873 20.7996 4.4801V8.3201C20.7996 8.8129 20.7932 8.9185 20.7772 8.9873C20.7428 9.13103 20.6693 9.26242 20.5648 9.36692C20.4603 9.47142 20.3289 9.54493 20.1852 9.5793C20.118 9.5953 20.0124 9.6001 19.5196 9.6001H15.6796C15.1868 9.6001 15.0812 9.5953 15.0124 9.5777C14.8687 9.54333 14.7373 9.46982 14.6328 9.36532C14.5283 9.26082 14.4548 9.12943 14.4204 8.9857C14.406 8.9201 14.3996 8.8145 14.3996 8.3201V4.4801C14.3996 3.9873 14.4044 3.8817 14.422 3.8129C14.4564 3.66917 14.5299 3.53777 14.6344 3.43327C14.7389 3.32878 14.8703 3.25527 15.014 3.2209L15.0124 3.2225ZM4.39961 12.8001H8.39961C8.76601 12.8001 9.08121 12.8001 9.35961 12.8657C9.79059 12.9687 10.1846 13.189 10.4981 13.5022C10.8116 13.8153 11.0322 14.2092 11.1356 14.6401C11.1996 14.9185 11.1996 15.2321 11.1996 15.6001V19.6001C11.1996 19.9665 11.1996 20.2817 11.134 20.5601C11.031 20.9911 10.8107 21.3851 10.4975 21.6986C10.1844 22.0121 9.7905 22.2327 9.35961 22.3361C9.08121 22.4001 8.76761 22.4001 8.39961 22.4001H4.39961C4.03321 22.4001 3.71801 22.4001 3.43961 22.3345C3.00863 22.2315 2.61457 22.0112 2.3011 21.698C1.98763 21.3848 1.76698 20.991 1.66361 20.5601C1.59961 20.2817 1.59961 19.9681 1.59961 19.6001V15.6001C1.59961 15.2337 1.59961 14.9185 1.66521 14.6401C1.76819 14.2091 1.98848 13.8151 2.30167 13.5016C2.61486 13.1881 3.00872 12.9675 3.43961 12.8641C3.71801 12.8001 4.03161 12.8001 4.39961 12.8001ZM4.47961 14.4001C3.98681 14.4001 3.88121 14.4049 3.81241 14.4225C3.66868 14.4569 3.53728 14.5304 3.43279 14.6349C3.32829 14.7394 3.25478 14.8708 3.22041 15.0145C3.20601 15.0801 3.19961 15.1857 3.19961 15.6801V19.5201C3.19961 20.0129 3.20441 20.1185 3.22201 20.1873C3.25638 20.331 3.32989 20.4624 3.43439 20.5669C3.53888 20.6714 3.67028 20.7449 3.81401 20.7793C3.88121 20.7953 3.98681 20.8001 4.47961 20.8001H8.31961C8.81241 20.8001 8.91801 20.7937 8.98681 20.7777C9.13054 20.7433 9.26194 20.6698 9.36643 20.5653C9.47093 20.4608 9.54444 20.3294 9.57881 20.1857C9.59481 20.1185 9.59961 20.0129 9.59961 19.5201V15.6801C9.59961 15.1873 9.59481 15.0817 9.57721 15.0129C9.54284 14.8692 9.46933 14.7378 9.36483 14.6333C9.26034 14.5288 9.12894 14.4553 8.98521 14.4209C8.91961 14.4065 8.81401 14.4001 8.31961 14.4001H4.47961ZM15.6796 12.8001H15.5996C15.2332 12.8001 14.918 12.8001 14.6396 12.8657C14.2086 12.9687 13.8146 13.189 13.5011 13.5022C13.1876 13.8153 12.967 14.2092 12.8636 14.6401C12.7996 14.9185 12.7996 15.2321 12.7996 15.6001V19.6001C12.7996 19.9665 12.7996 20.2817 12.8652 20.5601C12.9682 20.9911 13.1885 21.3851 13.5017 21.6986C13.8149 22.0121 14.2087 22.2327 14.6396 22.3361C14.918 22.4017 15.2332 22.4017 15.5996 22.4017H19.5996C19.966 22.4017 20.2812 22.4017 20.5596 22.3361C20.9903 22.2329 21.384 22.0124 21.6972 21.6993C22.0104 21.3861 22.2308 20.9924 22.334 20.5617C22.3996 20.2833 22.3996 19.9681 22.3996 19.6017V15.6001C22.3996 15.2337 22.3996 14.9185 22.334 14.6401C22.231 14.2091 22.0107 13.8151 21.6975 13.5016C21.3844 13.1881 20.9905 12.9675 20.5596 12.8641C20.2812 12.8001 19.9676 12.8001 19.5996 12.8001H15.6796ZM15.0124 14.4225C15.0812 14.4065 15.1884 14.4001 15.6796 14.4001H19.5196C20.0124 14.4001 20.118 14.4049 20.1868 14.4225C20.3305 14.4569 20.4619 14.5304 20.5664 14.6349C20.6709 14.7394 20.7444 14.8708 20.7788 15.0145C20.7948 15.0817 20.7996 15.1873 20.7996 15.6801V19.5201C20.7996 20.0129 20.7932 20.1185 20.7772 20.1873C20.7428 20.331 20.6693 20.4624 20.5648 20.5669C20.4603 20.6714 20.3289 20.7449 20.1852 20.7793C20.118 20.7953 20.0124 20.8001 19.5196 20.8001H15.6796C15.1868 20.8001 15.0812 20.7937 15.0124 20.7777C14.8687 20.7433 14.7373 20.6698 14.6328 20.5653C14.5283 20.4608 14.4548 20.3294 14.4204 20.1857C14.406 20.1201 14.3996 20.0145 14.3996 19.5201V15.6801C14.3996 15.1873 14.4044 15.0817 14.422 15.0129C14.4564 14.8692 14.5299 14.7378 14.6344 14.6333C14.7389 14.5288 14.8703 14.4553 15.014 14.4209L15.0124 14.4225Z"
                      fill="#535353"
                    />
                  </svg>
                </div>
              </a>
              <a
                className={this.state.nav === "doctorslist" ? "nav-active" : ""}
                onClick={() => {
                  this.setState({ nav: "doctorslist" });
                }}
              >
                <div className="p_dashboard__nav_a">
                  {" "}
                  <svg
                    width="34"
                    height="28"
                    viewBox="0 0 34 28"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M29.7494 19.775C27.6244 16.45 25.4994 16.975 23.1619 16.8C23.3744 17.325 23.3744 17.85 23.3744 18.55C26.7744 19.25 27.6244 22.575 27.6244 24.5V26.25H23.3744V24.5H25.4994C25.4994 24.5 25.4994 20.125 22.3119 20.125C19.1244 20.125 19.1244 24.325 19.1244 24.5H21.2494V26.25H16.9994V24.5C16.9994 22.575 17.8494 19.075 21.2494 18.55C21.2494 17.5 21.0369 16.625 20.8244 16.275C20.3994 16.1 19.9744 15.75 19.9744 15.225C19.9744 14.175 21.6744 14.525 22.9494 12.6C22.9494 12.6 24.8619 8.575 24.2244 5.075H22.0994C22.0994 4.725 22.3119 4.55 22.3119 4.2C22.3119 3.85 22.3119 3.675 22.0994 3.325H23.7994C23.1619 1.575 21.0369 0 16.9994 0C12.9619 0 10.8369 1.575 9.98691 3.5H11.6869C11.6869 3.85 11.4744 4.025 11.4744 4.375C11.4744 4.725 11.4744 4.9 11.6869 5.25H9.56191C9.13691 8.75 10.8369 12.775 10.8369 12.775C12.1119 14.525 13.8119 14.175 13.8119 15.4C13.8119 16.275 12.7494 16.625 11.4744 16.8C11.0494 17.15 10.6244 17.85 10.6244 19.25V21.35C11.8994 21.7 12.7494 22.75 12.7494 23.8C12.7494 25.025 11.2619 26.25 9.56191 26.25C7.86191 26.25 6.37441 25.025 6.37441 23.625C6.37441 22.4 7.22441 21.525 8.49941 21.175V19.075C8.49941 18.2 8.71191 17.5 8.92441 16.8C7.43691 16.975 5.73691 17.5 4.24941 19.775C2.97441 21.7 2.33691 28 2.33691 28H31.4494C31.6619 28 31.0244 21.7 29.7494 19.775ZM13.8119 4.375C13.8119 2.975 15.2994 1.75 16.9994 1.75C18.6994 1.75 20.1869 2.975 20.1869 4.375C20.1869 5.775 18.6994 7 16.9994 7C15.2994 7 13.8119 5.775 13.8119 4.375Z"
                      fill="#535353"
                    />
                    <path
                      d="M10.625 23.625C10.625 23.8571 10.5131 24.0796 10.3138 24.2437C10.1145 24.4078 9.84429 24.5 9.5625 24.5C9.28071 24.5 9.01046 24.4078 8.8112 24.2437C8.61194 24.0796 8.5 23.8571 8.5 23.625C8.5 23.3929 8.61194 23.1704 8.8112 23.0063C9.01046 22.8422 9.28071 22.75 9.5625 22.75C9.84429 22.75 10.1145 22.8422 10.3138 23.0063C10.5131 23.1704 10.625 23.3929 10.625 23.625Z"
                      fill="#535353"
                    />
                  </svg>
                </div>
              </a>
              <a
                className={
                  this.state.nav === "editmedicalrecord" ? "nav-active mlg" : ""
                }
                onClick={() => {
                  this.setState({ nav: "editmedicalrecord" });
                }}
              >
                {" "}
                <div className="p_dashboard__nav_a">
                  <svg
                    width="29"
                    height="29"
                    viewBox="0 0 23 27"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M1.83301 3.83329V23.1666C1.83301 23.8076 2.08762 24.4223 2.54083 24.8755C2.99405 25.3287 3.60873 25.5833 4.24967 25.5833H18.7497C19.3906 25.5833 20.0053 25.3287 20.4585 24.8755C20.9117 24.4223 21.1663 23.8076 21.1663 23.1666V9.07988C21.1663 8.75793 21.1019 8.43923 20.977 8.14251C20.8521 7.84578 20.6692 7.577 20.4389 7.35196L15.0739 2.10538C14.6224 1.66392 14.0161 1.4167 13.3847 1.41663H4.24967C3.60873 1.41663 2.99405 1.67124 2.54083 2.12445C2.08762 2.57766 1.83301 3.19235 1.83301 3.83329V3.83329Z"
                      stroke="#535461"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                    <path
                      d="M7.875 14.7083H15.125"
                      stroke="#535461"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                    <path
                      d="M7.875 19.5416H11.5"
                      stroke="#535461"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                    <path
                      d="M13.916 1.41663V6.24996C13.916 6.8909 14.1706 7.50559 14.6238 7.9588C15.0771 8.41201 15.6917 8.66663 16.3327 8.66663H21.166"
                      stroke="#535461"
                      stroke-width="2"
                      stroke-linejoin="round"
                    />
                  </svg>
                </div>
              </a>
              <a
                className={
                  this.state.nav === "dosagereminder" ? "nav-active" : ""
                }
                onClick={() => {
                  this.setState({ nav: "dosagereminder" });
                }}
              >
                {" "}
                <div className="p_dashboard__nav_a">
                  <svg
                    width="30"
                    height="30"
                    viewBox="0 0 30 30"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M24.5859 8.14746C24.5248 7.95939 24.4057 7.79549 24.2457 7.6792C24.0857 7.56291 23.8931 7.50019 23.6953 7.5H21.5625V4.21875C21.5625 3.7002 21.1436 3.28125 20.625 3.28125H9.375C8.85645 3.28125 8.4375 3.7002 8.4375 4.21875V7.5H6.30469C6.10681 7.49974 5.91395 7.56229 5.7539 7.67864C5.59384 7.795 5.47485 7.95915 5.41406 8.14746L3.28125 14.707V25.7812C3.28125 26.2998 3.7002 26.7188 4.21875 26.7188H25.7812C26.2998 26.7188 26.7188 26.2998 26.7188 25.7812V14.707L24.5859 8.14746ZM19.3359 18.3984C19.3359 18.5273 19.2305 18.6328 19.1016 18.6328H15.9375V21.7969C15.9375 21.9258 15.832 22.0312 15.7031 22.0312H14.2969C14.168 22.0312 14.0625 21.9258 14.0625 21.7969V18.6328H10.8984C10.7695 18.6328 10.6641 18.5273 10.6641 18.3984V16.9922C10.6641 16.8633 10.7695 16.7578 10.8984 16.7578H14.0625V13.5938C14.0625 13.4648 14.168 13.3594 14.2969 13.3594H15.7031C15.832 13.3594 15.9375 13.4648 15.9375 13.5938V16.7578H19.1016C19.2305 16.7578 19.3359 16.8633 19.3359 16.9922V18.3984ZM19.4531 7.5H10.5469V5.39062H19.4531V7.5Z"
                      fill="#535353"
                    />
                  </svg>
                </div>
              </a>
              <a onClick={this.logout}>
                {" "}
                <div className="p_dashboard__nav_a">
                  <svg
                    width="30"
                    height="30"
                    viewBox="0 0 30 30"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M5.625 28.125H16.875C17.3721 28.1245 17.8488 27.9268 18.2003 27.5753C18.5518 27.2238 18.7495 26.7471 18.75 26.25V23.4375H16.875V26.25H5.625V3.75H16.875V6.5625H18.75V3.75C18.7495 3.25287 18.5518 2.77625 18.2003 2.42472C17.8488 2.0732 17.3721 1.8755 16.875 1.875H5.625C5.12787 1.8755 4.65125 2.0732 4.29972 2.42472C3.9482 2.77625 3.7505 3.25287 3.75 3.75V26.25C3.7505 26.7471 3.9482 27.2238 4.29972 27.5753C4.65125 27.9268 5.12787 28.1245 5.625 28.125Z"
                      fill="black"
                    />
                    <path
                      d="M19.2994 19.2994L22.6613 15.9375H9.375V14.0625H22.6613L19.2994 10.7006L20.625 9.375L26.25 15L20.625 20.625L19.2994 19.2994Z"
                      fill="black"
                    />
                  </svg>
                </div>
              </a>
            </div>
          </div>
          <div className="p_dashboard__right_side">
            <Menu
              setnav={() => this.setState({ nav: "editmedicalrecord" })}
              nav={this.state.nav}
              medrecord_id={this.state.userData.medrecord_id}
              name={this.state.userData.name}
              dosagebox_id={this.state.userData.dosagebox_id}
              doctors={this.state.userData.doctors}
              token={this.state.token}
              doctorAddNotifi={this.state.userData.doctorAddNotifi}
            />
          </div>
        </div>
      </>
    );
  }
}
function Menu({
  nav,
  medrecord_id,
  dosagebox_id,
  doctors,
  token,
  doctorAddNotifi,
  name,
  setnav,
}) {
  function update_data() {
    axios
      .get(`${process.env.REACT_APP_SERVER_URL}/patient/getpatient`, {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then((res) => {
        if (res.data.success === true) {
          localStorage.setItem("UserData", JSON.stringify(res.data.data));
        }
      });
  }
  setInterval(() => {
    update_data();
  }, 10000);
  if (nav === "medicalrecord")
    return (
      <MedicalRecords
        medrecord_id={medrecord_id}
        token={token}
        doctorAddNotifi={doctorAddNotifi}
        name={name}
        setnav={setnav}
      />
    );
  if (nav === "dosagereminder")
    return (
      <DosageReminder
        dosagebox_id={dosagebox_id}
        token={token}
        doctorAddNotifi={doctorAddNotifi}
      />
    );
  if (nav === "doctorslist")
    return (
      <DoctorsList
        doctors={doctors}
        token={token}
        doctorAddNotifi={doctorAddNotifi}
      />
    );
  if (nav === "editmedicalrecord")
    return (
      <EditMedicalRecords
        medrecord_id={medrecord_id}
        token={token}
        doctorAddNotifi={doctorAddNotifi}
      />
    );
}

function DosageReminder({ dosagebox_id, token, doctorAddNotifi }) {
  const [dosageData, setdosageData] = useState();
  const [refresh, setrefresh] = useState("");
  const [addmode, setaddmode] = useState(false);
  const [loading, setloading] = useState(false);
  const [checkerr, seterr] = useState(false);
  const [notifytoggle, setnotifytoggle] = useState(false);

  const [addreminder, setaddreminder] = useState({ med: "", time: [] });
  function updateArr(val, i) {
    let arr = [...addreminder.time];
    arr[i] = val;
    setaddreminder({
      med: addreminder.med,
      time: arr,
    });
  }
  function setmedname(val) {
    setaddreminder({ med: val.toLowerCase(), time: addreminder.time });
  }
  function submitreminder() {
    if (addreminder.med) {
      axios
        .post(
          `${process.env.REACT_APP_SERVER_URL}/patient/adddosage`,
          addreminder,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        )
        .then((res) => {
          if (res.data.success === true) {
            setaddreminder({ med: "", time: [] });
            setrefresh(addreminder);
            setaddmode(!addmode);
          } else {
            seterr(true);
          }
        });
    }
  }
  useEffect(() => {
    axios
      .get(
        `${process.env.REACT_APP_SERVER_URL}/patient/mydosage/${dosagebox_id}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      )
      .then((res) => {
        if (res.data.success === true) {
          setdosageData(res.data.data);
          setloading(true);
        }
      });
  }, [refresh]);
  return (
    <div className="p_dashboard__dosage">
      <div className="p_dashboard__component_title">
        <div className="title_p">
          <h4>Dosage Reminder</h4>

          <p>
            Add a reminder and we will remind you to take medicine
            &#9200;&#9996;
          </p>
        </div>
        <div>
          <a onClick={() => setnotifytoggle(!notifytoggle)}>
            {" "}
            <svg
              width="30"
              height="30"
              viewBox="0 0 34 34"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <circle cx="17" cy="17" r="17" fill="#00A459" />
              <path
                d="M12.5667 8.62051L11.1324 7.15385C8.72518 9.03077 7.14042 11.9231 7 15.2051H9.00602C9.15647 12.4872 10.5206 10.1077 12.5667 8.62051V8.62051ZM24.994 15.2051H27C26.8495 11.9231 25.2648 9.03077 22.8676 7.15385L21.4433 8.62051C23.4694 10.1077 24.8435 12.4872 24.994 15.2051ZM23.0181 15.7179C23.0181 12.5692 21.3731 9.93333 18.5045 9.2359V8.53846C18.5045 7.68718 17.8325 7 17 7C16.1675 7 15.4955 7.68718 15.4955 8.53846V9.2359C12.6169 9.93333 10.9819 12.559 10.9819 15.7179V20.8462L8.97593 22.8974V23.9231H25.0241V22.8974L23.0181 20.8462V15.7179ZM17 27C17.1404 27 17.2708 26.9897 17.4012 26.959C18.0532 26.8154 18.5848 26.3641 18.8455 25.7487C18.9458 25.5026 18.996 25.2359 18.996 24.9487H14.984C14.994 26.0769 15.8867 27 17 27Z"
                fill="white"
              />
            </svg>
          </a>
          {notifytoggle ? (
            <Notifications doctorAddNotifi={doctorAddNotifi} token={token} />
          ) : (
            ""
          )}
        </div>
      </div>
      <div className="p_dashboard__reminder_section">
        {!loading ? (
          <div>loading...</div>
        ) : (
          <div className="p_dashboard_reminders_grid">
            {dosageData.map((mdata) => {
              return (
                <ReminderCard
                  medData={mdata}
                  refresh={(data) => {
                    setloading(false);
                    setrefresh(data);
                  }}
                  token={token}
                />
              );
            })}
            <div className="reminders_card add_reminder">
              {!addmode ? (
                <a onClick={() => setaddmode(true)}>
                  <svg
                    width="93"
                    height="94"
                    viewBox="0 0 93 94"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M46.5 93.0186C38.0696 93.0186 29.8285 90.5187 22.8188 85.835C15.8092 81.1513 10.3458 74.4942 7.11965 66.7055C3.89347 58.9168 3.04935 50.3463 4.69405 42.0778C6.33874 33.8094 10.3984 26.2144 16.3596 20.2531C22.3208 14.2919 29.9159 10.2323 38.1843 8.5876C46.4527 6.94291 55.0232 7.78702 62.8119 11.0132C70.6006 14.2394 77.2577 19.7027 81.9414 26.7124C86.6251 33.722 89.125 41.9631 89.125 50.3936C89.125 61.6984 84.6342 72.5403 76.6404 80.534C68.6467 88.5277 57.8049 93.0186 46.5 93.0186ZM46.5 15.5186C39.6024 15.5186 32.8597 17.564 27.1245 21.3961C21.3893 25.2282 16.9193 30.6749 14.2797 37.0475C11.6401 43.4201 10.9495 50.4323 12.2951 57.1973C13.6408 63.9624 16.9623 70.1766 21.8397 75.0539C26.717 79.9313 32.9312 83.2528 39.6962 84.5985C46.4613 85.9441 53.4735 85.2535 59.8461 82.6139C66.2187 79.9743 71.6654 75.5042 75.4975 69.7691C79.3296 64.0339 81.375 57.2912 81.375 50.3936C81.375 41.1441 77.7007 32.2736 71.1604 25.7332C64.62 19.1929 55.7494 15.5186 46.5 15.5186Z"
                      fill="#00A459"
                    />
                    <path
                      d="M0 13.9375L13.8774 0.0309609L19.3633 5.5053L5.48581 19.4118L0 13.9375Z"
                      fill="#00A459"
                    />
                    <path
                      d="M73.625 5.47412L79.1108 -0.000214252L92.9883 13.9063L87.5024 19.3807L73.625 5.47412Z"
                      fill="#00A459"
                    />
                    <path
                      d="M65.875 46.5186H50.375V31.0186H42.625V46.5186H27.125V54.2686H42.625V69.7686H50.375V54.2686H65.875V46.5186Z"
                      fill="#00A459"
                    />
                  </svg>

                  <h4>Add reminder</h4>
                </a>
              ) : (
                <>
                  <div className="reminder_inputs">
                    <div className="reminder_input_blocks">
                      <label>Name: </label>
                      <input
                        type="text"
                        onChange={(e) => setmedname(e.target.value)}
                      />
                    </div>
                    <div className="reminder_input_blocks">
                      <label>Morning: </label>
                      <input
                        type="time"
                        onChange={(e) => updateArr(e.target.value, 0)}
                      />
                    </div>{" "}
                    <div className="reminder_input_blocks">
                      <label>AfterNoon: </label>
                      <input
                        type="time"
                        onChange={(e) => updateArr(e.target.value, 1)}
                      />
                    </div>{" "}
                    <div className="reminder_input_blocks">
                      <label>Night: </label>
                      <input
                        type="time"
                        onChange={(e) => updateArr(e.target.value, 2)}
                      />
                    </div>
                  </div>
                  <span className={checkerr ? "reminder_error" : "none"}>
                    reminder already exist
                  </span>
                  <span
                    className={!addreminder.med ? "reminder_error" : "none"}
                  >
                    Enter Data
                  </span>
                  <div className="reminder_buttons">
                    <a
                      onClick={() => {
                        submitreminder();
                      }}
                    >
                      {" "}
                      <svg
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <circle cx="12" cy="12" r="11.5" stroke="#00A459" />
                        <line
                          x1="6.45"
                          y1="14.4"
                          x2="10.45"
                          y2="17.4"
                          stroke="#00A459"
                          stroke-width="1.5"
                        />
                        <line
                          x1="9.39345"
                          y1="17.5589"
                          x2="17.3934"
                          y2="6.55887"
                          stroke="#00A459"
                          stroke-width="1.5"
                        />
                      </svg>
                    </a>
                    <a
                      onClick={() => {
                        setaddmode(!addmode);
                        seterr(false);

                        setaddreminder({ med: "", time: [] });
                      }}
                    >
                      <svg
                        width="21"
                        height="21"
                        viewBox="0 0 21 21"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M7.875 7.875H9.1875V15.75H7.875V7.875Z"
                          fill="#BF1111"
                        />
                        <path
                          d="M11.8125 7.875H13.125V15.75H11.8125V7.875Z"
                          fill="#BF1111"
                        />
                        <path
                          d="M2.625 3.9375V5.25H3.9375V18.375C3.9375 18.7231 4.07578 19.0569 4.32192 19.3031C4.56806 19.5492 4.9019 19.6875 5.25 19.6875H15.75C16.0981 19.6875 16.4319 19.5492 16.6781 19.3031C16.9242 19.0569 17.0625 18.7231 17.0625 18.375V5.25H18.375V3.9375H2.625ZM5.25 18.375V5.25H15.75V18.375H5.25Z"
                          fill="#BF1111"
                        />
                        <path
                          d="M7.875 1.3125H13.125V2.625H7.875V1.3125Z"
                          fill="#BF1111"
                        />
                      </svg>
                    </a>
                  </div>
                </>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

function ReminderCard({ medData, refresh, token }) {
  const [editmode, seteditmode] = useState(false);
  const [meddata, updatemeddata] = useState(medData);
  function updateArr(val, i) {
    console.log(val);
    let arr = [...meddata.time];
    arr[i] = val;
    updatemeddata({
      med: meddata.med,
      renameMed: meddata.renameMed,
      time: arr,
    });
  }
  function setmedname(val) {
    updatemeddata({ med: meddata.med, renameMed: val, time: meddata.time });
  }
  function setData() {
    seteditmode(!editmode);
    if (editmode) {
      axios
        .post(
          `${process.env.REACT_APP_SERVER_URL}/patient/editdosage`,
          meddata,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        )
        .then((res) => {
          if (res.data.success === true) {
            refresh(meddata);
          }
        });
    }
  }
  function Deletemed() {
    axios
      .post(
        `${process.env.REACT_APP_SERVER_URL}/patient/deletedosage/${meddata.med}`,
        meddata,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      )
      .then((res) => {
        if (res.data.success === true) {
          refresh(meddata);
        }
      });
  }
  return (
    <div className="reminders_card">
      <div className="reminders_card_title">
        {editmode ? (
          <input
            placeholder={meddata.med}
            onChange={(e) => {
              setmedname(e.target.value);
            }}
          />
        ) : (
          <h4>{meddata.med.toUpperCase()}</h4>
        )}
        <div className="card_butons">
          <a
            onClick={() => {
              setData();
            }}
          >
            {editmode ? (
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle cx="12" cy="12" r="11.5" stroke="#00A459" />
                <line
                  x1="6.45"
                  y1="14.4"
                  x2="10.45"
                  y2="17.4"
                  stroke="#00A459"
                  stroke-width="1.5"
                />
                <line
                  x1="9.39345"
                  y1="17.5589"
                  x2="17.3934"
                  y2="6.55887"
                  stroke="#00A459"
                  stroke-width="1.5"
                />
              </svg>
            ) : (
              <svg
                width="22"
                height="22"
                viewBox="0 0 22 22"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M1.375 17.875H20.625V19.25H1.375V17.875Z"
                  fill="#535353"
                />
                <path
                  d="M17.4625 6.1875C18.0125 5.6375 18.0125 4.8125 17.4625 4.2625L14.9875 1.7875C14.4375 1.2375 13.6125 1.2375 13.0625 1.7875L2.75 12.1V16.5H7.15L17.4625 6.1875ZM14.025 2.75L16.5 5.225L14.4375 7.2875L11.9625 4.8125L14.025 2.75ZM4.125 15.125V12.65L11 5.775L13.475 8.25L6.6 15.125H4.125Z"
                  fill="#535353"
                />
              </svg>
            )}
          </a>
          <a onClick={Deletemed}>
            <svg
              width="21"
              height="21"
              viewBox="0 0 21 21"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M7.875 7.875H9.1875V15.75H7.875V7.875Z" fill="#BF1111" />
              <path
                d="M11.8125 7.875H13.125V15.75H11.8125V7.875Z"
                fill="#BF1111"
              />
              <path
                d="M2.625 3.9375V5.25H3.9375V18.375C3.9375 18.7231 4.07578 19.0569 4.32192 19.3031C4.56806 19.5492 4.9019 19.6875 5.25 19.6875H15.75C16.0981 19.6875 16.4319 19.5492 16.6781 19.3031C16.9242 19.0569 17.0625 18.7231 17.0625 18.375V5.25H18.375V3.9375H2.625ZM5.25 18.375V5.25H15.75V18.375H5.25Z"
                fill="#BF1111"
              />
              <path
                d="M7.875 1.3125H13.125V2.625H7.875V1.3125Z"
                fill="#BF1111"
              />
            </svg>
          </a>
        </div>
      </div>
      <div className="reminders_card_details">
        <img src={dosageimg} />
        <div className="reminder_times">
          <h3>
            Morning:{" "}
            {editmode ? (
              <input
                type="time"
                placeholder={meddata.time[0]}
                onChange={(e) => {
                  updateArr(e.target.value, 0);
                }}
              />
            ) : (
              meddata.time[0]
            )}{" "}
            am
          </h3>
          <h3>
            AfterNoon:{" "}
            {editmode ? (
              <input
                type="time"
                placeholder={meddata.time[1]}
                onChange={(e) => {
                  updateArr(e.target.value, 1);
                }}
              />
            ) : (
              meddata.time[1]
            )}{" "}
            pm
          </h3>
          <h3>
            Night:{" "}
            {editmode ? (
              <input
                type="time"
                placeholder={meddata.time[2]}
                onChange={(e) => {
                  updateArr(e.target.value, 2);
                }}
              />
            ) : (
              meddata.time[2]
            )}{" "}
            pm
          </h3>
        </div>
      </div>
    </div>
  );
}

function EditMedicalRecords({ medrecord_id, token, doctorAddNotifi }) {
  const [state, setState] = useState({
    meddata: {},
    loading: true,
  });
  const [refresh, setrefresh] = useState({});
  const [notifytoggle, setnotifytoggle] = useState(false);
  useEffect(() => {
    axios
      .get(
        `${process.env.REACT_APP_SERVER_URL}/patient/medrecord/${medrecord_id}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      )
      .then((res) => {
        if (res.data.success === true) {
          var data = [];
          for (let d in res.data.data) {
            if (d !== "_id" && d !== "__v")
              data.push({ [d]: res.data.data[d] });
          }
          setState({ meddata: data, loading: false });
        }
      });
  }, [refresh]);

  return (
    <div className="p_dashboard__dosage">
      <div className="p_dashboard__component_title">
        <div className="title_p">
          <h4>Edit Medical Record</h4>{" "}
          <p>Add,Update and Delete your medcial records here.&#128221;</p>
        </div>
        <div>
          <a onClick={() => setnotifytoggle(!notifytoggle)}>
            {" "}
            <svg
              width="30"
              height="30"
              viewBox="0 0 34 34"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <circle cx="17" cy="17" r="17" fill="#00A459" />
              <path
                d="M12.5667 8.62051L11.1324 7.15385C8.72518 9.03077 7.14042 11.9231 7 15.2051H9.00602C9.15647 12.4872 10.5206 10.1077 12.5667 8.62051V8.62051ZM24.994 15.2051H27C26.8495 11.9231 25.2648 9.03077 22.8676 7.15385L21.4433 8.62051C23.4694 10.1077 24.8435 12.4872 24.994 15.2051ZM23.0181 15.7179C23.0181 12.5692 21.3731 9.93333 18.5045 9.2359V8.53846C18.5045 7.68718 17.8325 7 17 7C16.1675 7 15.4955 7.68718 15.4955 8.53846V9.2359C12.6169 9.93333 10.9819 12.559 10.9819 15.7179V20.8462L8.97593 22.8974V23.9231H25.0241V22.8974L23.0181 20.8462V15.7179ZM17 27C17.1404 27 17.2708 26.9897 17.4012 26.959C18.0532 26.8154 18.5848 26.3641 18.8455 25.7487C18.9458 25.5026 18.996 25.2359 18.996 24.9487H14.984C14.994 26.0769 15.8867 27 17 27Z"
                fill="white"
              />
            </svg>
          </a>
          {notifytoggle ? (
            <Notifications doctorAddNotifi={doctorAddNotifi} token={token} />
          ) : (
            ""
          )}
        </div>
      </div>
      {state.loading ? (
        <div>loading...</div>
      ) : (
        <div className="p_dashboard__editmed_section">
          {state.meddata.map((md, i) => {
            let name = Object.keys(md);

            if (typeof md[Object.keys(md)[0]] === "number") {
              return (
                <div key={i} className="p_dashboard_editmed_datablock">
                  <h4>{name.toString().toUpperCase()}</h4>
                  <div className="p_dashboard__editmed_grid">
                    {md[Object.keys(md)[0]] === 0 ? (
                      name != "bmi" ? (
                        <AddNewMedCard
                          name={name}
                          refresh={(data) => {
                            setState({ meddata: state.meddata, loading: true });
                            setrefresh(data);
                          }}
                          token={token}
                        />
                      ) : (
                        ""
                      )
                    ) : (
                      <MedCard
                        data={md[Object.keys(md)[0]]}
                        name={name}
                        token={token}
                        refresh={(data) => {
                          setState({ loading: true });
                          setrefresh(data);
                        }}
                      />
                    )}
                  </div>
                </div>
              );
            }
            if (typeof md[Object.keys(md)[0]] !== "number") {
              return (
                <div key={i} className="p_dashboard_editmed_datablock">
                  <h4>{name.toString().toUpperCase()}</h4>
                  <div className="p_dashboard__editmed_grid">
                    {md[Object.keys(md)[0]].map((data) => {
                      return (
                        <MedCard
                          data={data}
                          name={name}
                          token={token}
                          refresh={(data) => {
                            setState({ loading: true });
                            setrefresh(data);
                          }}
                        />
                      );
                    })}
                    {name != "age" && name != "bmi" ? (
                      <AddNewMedCard
                        name={name}
                        refresh={(data) => {
                          setState({ meddata: state.meddata, loading: true });
                          setrefresh(data);
                        }}
                        token={token}
                      />
                    ) : (
                      ""
                    )}
                  </div>{" "}
                </div>
              );
            }
          })}
        </div>
      )}
    </div>
  );
}
function AddNewMedCard({ name, refresh, token }) {
  const [change, updatechange] = useState("");
  const [newmed, setnewmed] = useState(false);
  const [err, seterr] = useState(true);
  function upchange(val) {
    updatechange(val);
    if (val) {
      seterr(false);
    } else {
      seterr(true);
    }
  }
  function SubmitNewMed(name) {
    if (change) {
      var body = {
        medname: name,
        val: change,
      };
      axios
        .post(
          `${process.env.REACT_APP_SERVER_URL}/patient/addmedrecord`,
          body,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        )
        .then((res) => {
          if (res.data.success == true) {
            setnewmed(!newmed);

            refresh(res.data);
          }
        })
        .catch((err) => {
          console.log(err);
        });
    } else {
      seterr(true);
    }
  }
  return (
    <div className="medcard addmed">
      {!newmed ? (
        <>
          {" "}
          <a
            onClick={() => {
              setnewmed(!newmed);
            }}
          >
            <svg
              width="58"
              height="58"
              viewBox="0 0 58 58"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M29.4664 7.41541C41.211 7.41541 50.8202 17.0246 50.8202 28.7692C50.8202 40.5138 41.211 50.123 29.4664 50.123C17.7219 50.123 8.11267 40.5138 8.11267 28.7692C8.11267 17.0246 17.7219 7.41541 29.4664 7.41541ZM29.4664 3.85645C15.7644 3.85645 4.55371 15.0672 4.55371 28.7692C4.55371 42.4712 15.7644 53.6819 29.4664 53.6819C43.1684 53.6819 54.3792 42.4712 54.3792 28.7692C54.3792 15.0672 43.1684 3.85645 29.4664 3.85645Z"
                fill="#535461"
              />
              <path
                d="M43.7031 26.9896H31.2468V14.5332H27.6878V26.9896H15.2314V30.5485H27.6878V43.0049H31.2468V30.5485H43.7031V26.9896Z"
                fill="#535461"
              />
            </svg>
          </a>
          <h3>Add {name}</h3>
        </>
      ) : (
        <div className="addnew-inputs">
          <h3>Enter {name}</h3>
          <input type="number" onChange={(e) => upchange(e.target.value)} />
          <span className={err ? "reminder_error " : "none"}>Enter data</span>
          <div className="addnew-buttons">
            <a
              onClick={() => {
                SubmitNewMed(name[0]);
              }}
            >
              {" "}
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle cx="12" cy="12" r="11.5" stroke="#00A459" />
                <line
                  x1="6.45"
                  y1="14.4"
                  x2="10.45"
                  y2="17.4"
                  stroke="#00A459"
                  stroke-width="1.5"
                />
                <line
                  x1="9.39345"
                  y1="17.5589"
                  x2="17.3934"
                  y2="6.55887"
                  stroke="#00A459"
                  stroke-width="1.5"
                />
              </svg>
            </a>
            <a
              onClick={() => {
                setnewmed(!newmed);
              }}
            >
              <svg
                width="21"
                height="21"
                viewBox="0 0 21 21"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M7.875 7.875H9.1875V15.75H7.875V7.875Z"
                  fill="#BF1111"
                />
                <path
                  d="M11.8125 7.875H13.125V15.75H11.8125V7.875Z"
                  fill="#BF1111"
                />
                <path
                  d="M2.625 3.9375V5.25H3.9375V18.375C3.9375 18.7231 4.07578 19.0569 4.32192 19.3031C4.56806 19.5492 4.9019 19.6875 5.25 19.6875H15.75C16.0981 19.6875 16.4319 19.5492 16.6781 19.3031C16.9242 19.0569 17.0625 18.7231 17.0625 18.375V5.25H18.375V3.9375H2.625ZM5.25 18.375V5.25H15.75V18.375H5.25Z"
                  fill="#BF1111"
                />
                <path
                  d="M7.875 1.3125H13.125V2.625H7.875V1.3125Z"
                  fill="#BF1111"
                />
              </svg>
            </a>
          </div>
        </div>
      )}
    </div>
  );
}
function MedCard({ data, name, token, refresh }) {
  const [editmode, seteditmode] = useState(false);
  const [change, setchange] = useState("");
  function updatechange(val) {
    setchange(val);
  }

  function submitChange() {
    var body = {
      medname: name[0],
      val: change || data.value || data,
      id: data._id,
    };
    console.log(body);
    axios
      .post(`${process.env.REACT_APP_SERVER_URL}/patient/editmedrecord`, body, {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then((res) => {
        console.log(res.data);
        if (res.data.success === true) {
          seteditmode(!editmode);

          refresh(res.data);
        }
      })
      .catch((err) => console.log(err));
  }
  function Deletedata() {
    let body = {
      specificmed: name[0],
      id: data._id,
    };
    axios
      .post(
        `${process.env.REACT_APP_SERVER_URL}/patient/deletemedrecord/specific`,
        body,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      )
      .then((res) => {
        if (res.data.status === true) {
          refresh(res.data.data);
        }
      });
  }
  return (
    <div className="medcard">
      <div className="medcard_title">
        <h3>
          {data.date}
          {name == "age" ? "Current Age" : name == "bmi" ? "Current Bmi" : ""}
        </h3>
        {name != "bmi" ? (
          <div className="medata_buttons">
            {editmode ? (
              <a
                onClick={() => {
                  submitChange();
                }}
              >
                <svg
                  width="22"
                  height="22"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <circle cx="12" cy="12" r="11.5" stroke="#00A459" />
                  <line
                    x1="6.45"
                    y1="14.4"
                    x2="10.45"
                    y2="17.4"
                    stroke="#00A459"
                    stroke-width="1.5"
                  />
                  <line
                    x1="9.39345"
                    y1="17.5589"
                    x2="17.3934"
                    y2="6.55887"
                    stroke="#00A459"
                    stroke-width="1.5"
                  />
                </svg>
              </a>
            ) : (
              <a
                onClick={() => {
                  seteditmode(!editmode);
                }}
              >
                <svg
                  width="22"
                  height="22"
                  viewBox="0 0 22 22"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M1.375 17.875H20.625V19.25H1.375V17.875Z"
                    fill="#535353"
                  />
                  <path
                    d="M17.4625 6.1875C18.0125 5.6375 18.0125 4.8125 17.4625 4.2625L14.9875 1.7875C14.4375 1.2375 13.6125 1.2375 13.0625 1.7875L2.75 12.1V16.5H7.15L17.4625 6.1875ZM14.025 2.75L16.5 5.225L14.4375 7.2875L11.9625 4.8125L14.025 2.75ZM4.125 15.125V12.65L11 5.775L13.475 8.25L6.6 15.125H4.125Z"
                    fill="#535353"
                  />
                </svg>
              </a>
            )}
            {name != "age" ? (
              <a onClick={Deletedata}>
                <svg
                  width="21"
                  height="21"
                  viewBox="0 0 21 21"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M7.875 7.875H9.1875V15.75H7.875V7.875Z"
                    fill="#BF1111"
                  />
                  <path
                    d="M11.8125 7.875H13.125V15.75H11.8125V7.875Z"
                    fill="#BF1111"
                  />
                  <path
                    d="M2.625 3.9375V5.25H3.9375V18.375C3.9375 18.7231 4.07578 19.0569 4.32192 19.3031C4.56806 19.5492 4.9019 19.6875 5.25 19.6875H15.75C16.0981 19.6875 16.4319 19.5492 16.6781 19.3031C16.9242 19.0569 17.0625 18.7231 17.0625 18.375V5.25H18.375V3.9375H2.625ZM5.25 18.375V5.25H15.75V18.375H5.25Z"
                    fill="#BF1111"
                  />
                  <path
                    d="M7.875 1.3125H13.125V2.625H7.875V1.3125Z"
                    fill="#BF1111"
                  />
                </svg>
              </a>
            ) : (
              ""
            )}
          </div>
        ) : (
          ""
        )}
      </div>
      <div className="medcard_data">
        {" "}
        {editmode ? (
          <>
            <input
              type="number"
              placeholder={data.value || data}
              onChange={(e) => updatechange(e.target.value)}
              max="3"
            />{" "}
            <h3>
              {" "}
              {name == "height" ? " cm" : ""} {name == "weight" ? "Kg" : ""}
              {name == "age" ? "y/o" : ""}
            </h3>
          </>
        ) : (
          <h3>
            {data.value || data}
            {name == "height" ? " cm" : ""} {name == "weight" ? "Kg" : ""}
          </h3>
        )}
      </div>
    </div>
  );
}
export function Notifications({ token }) {
  const [userdata, setuserData] = useState();
  const [refresh, setrefresh] = useState(true);
  useEffect(() => {
    setuserData(JSON.parse(localStorage.getItem("UserData")));
    setrefresh(false);
  }, [refresh]);

  return (
    <div className="notifciation-block">
      {userdata
        ? userdata.doctorAddNotifi.length != 0
          ? userdata.doctorAddNotifi.map((data) => {
              return (
                <NotifiContent
                  doctorAddNotifi={data}
                  token={token}
                  refresh={(data) => {
                    setuserData({ doctorAddNotifi: [] });
                    setrefresh(data);
                  }}
                />
              );
            })
          : "No Notifications"
        : ""}
    </div>
  );
}
function NotifiContent({ doctorAddNotifi, token, refresh }) {
  const [name, setname] = useState("");
  const [loading, setloading] = useState(true);

  var id = doctorAddNotifi.split("/")[2];
  axios
    .get(`${process.env.REACT_APP_SERVER_URL}/doctor/${id}`, {
      headers: { Authorization: `Bearer ${token}` },
    })
    .then((res) => {
      setname(res.data.data.name);
      setloading(false);
    });
  function accept() {
    var body = {
      docid: id,
    };
    axios
      .post(`${process.env.REACT_APP_SERVER_URL}/doctor/adddoctor`, body, {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then((res) => {
        if (res.data.success == true) {
          localStorage.setItem("UserData", JSON.stringify(res.data.data));
          refresh(res.data);
        }
      })
      .catch((err) => console.log(err));
  }
  function reject() {
    var body = {
      id: id,
    };
    axios
      .post(`${process.env.REACT_APP_SERVER_URL}/doctor/clearnotifi`, body, {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then((res) => {
        if (res.data.success == true) {
          localStorage.setItem("UserData", JSON.stringify(res.data.data));
          refresh(res.data);
        }
      })
      .catch((err) => console.log(err));
  }

  return (
    <div className="notification-block-div">
      {!loading ? (
        <p>Dr.{name} has sent yout invite </p>
      ) : (
        <div className="blank_loading"></div>
      )}
      <div className="notification-buttons">
        {loading ? (
          <>
            <div className="button_blank_load"></div>
            <div className="button_blank_load"></div>
          </>
        ) : (
          <>
            {" "}
            <a onClick={accept}>Accept</a>
            <a onClick={reject}>Reject</a>
          </>
        )}
      </div>
    </div>
  );
}
function DoctorsList({ doctors, token, doctorAddNotifi }) {
  const [doctorData, setdoctordata] = useState({
    _id: doctors[doctors.length - 1] || null,
    doctors: doctors,
  });
  const [name, setname] = useState("");
  const [notifytoggle, setnotifytoggle] = useState(false);
  const [loading, setloading] = useState(true);
  useEffect(() => {
    axios
      .get(`${process.env.REACT_APP_SERVER_URL}/doctor/${doctorData._id}`, {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then((res) => {
        setname(res.data.data.name);
        setloading(false);
      });
  }, []);
  function Delete() {
    if (doctorData._id) {
      var body = {
        _id: doctorData._id,
      };
      axios
        .post(
          `${process.env.REACT_APP_SERVER_URL}/patient/deletedoctor`,
          body,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        )
        .then((res) => {
          console.log(res);
        });
    }
  }
  return (
    <>
      <div className="p_dashboard__dosage">
        <div className="p_dashboard__component_title">
          <div className="title_p">
            <h4>Doctors</h4>
            <p>List of all doctors you are subscribed to.&#128138;&#x1F489;</p>
          </div>
          <div>
            <a onClick={() => setnotifytoggle(!notifytoggle)}>
              <svg
                width="30"
                height="30"
                viewBox="0 0 34 34"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle cx="17" cy="17" r="17" fill="#00A459" />
                <path
                  d="M12.5667 8.62051L11.1324 7.15385C8.72518 9.03077 7.14042 11.9231 7 15.2051H9.00602C9.15647 12.4872 10.5206 10.1077 12.5667 8.62051V8.62051ZM24.994 15.2051H27C26.8495 11.9231 25.2648 9.03077 22.8676 7.15385L21.4433 8.62051C23.4694 10.1077 24.8435 12.4872 24.994 15.2051ZM23.0181 15.7179C23.0181 12.5692 21.3731 9.93333 18.5045 9.2359V8.53846C18.5045 7.68718 17.8325 7 17 7C16.1675 7 15.4955 7.68718 15.4955 8.53846V9.2359C12.6169 9.93333 10.9819 12.559 10.9819 15.7179V20.8462L8.97593 22.8974V23.9231H25.0241V22.8974L23.0181 20.8462V15.7179ZM17 27C17.1404 27 17.2708 26.9897 17.4012 26.959C18.0532 26.8154 18.5848 26.3641 18.8455 25.7487C18.9458 25.5026 18.996 25.2359 18.996 24.9487H14.984C14.994 26.0769 15.8867 27 17 27Z"
                  fill="white"
                />
              </svg>
            </a>
            {notifytoggle ? (
              <Notifications doctorAddNotifi={doctorAddNotifi} token={token} />
            ) : (
              ""
            )}
          </div>
        </div>
        {doctorData.doctors.length !== 0 ? (
          loading ? (
            <div>loading....</div>
          ) : (
            <div className="p_dashboard_doctors-grid">
              <div className="reminders_card doc-card">
                <div className="card_topinfo">
                  <img src={doctor} />
                  <h3>Dr.{name}</h3>
                </div>
                <div className="doc_contact_button">
                  <svg
                    width="28"
                    height="28"
                    viewBox="0 0 32 32"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M25.9998 29H25.8298C6.17976 27.87 3.38976 11.29 2.99976 6.23C2.96833 5.83658 3.01485 5.44082 3.13663 5.06541C3.25842 4.69 3.45309 4.3423 3.70948 4.04225C3.96587 3.7422 4.27894 3.49569 4.63077 3.31684C4.98259 3.13799 5.36625 3.03032 5.75976 3H11.2698C11.6703 2.99961 12.0618 3.11951 12.3934 3.34416C12.725 3.56881 12.9816 3.88787 13.1298 4.26L14.6498 8C14.7961 8.36355 14.8324 8.76208 14.7542 9.14609C14.676 9.5301 14.4867 9.88267 14.2098 10.16L12.0798 12.31C12.4125 14.2007 13.3179 15.9437 14.6737 17.303C16.0294 18.6622 17.7699 19.5723 19.6598 19.91L21.8298 17.76C22.1113 17.4862 22.4671 17.3013 22.853 17.2283C23.2389 17.1554 23.6378 17.1977 23.9998 17.35L27.7698 18.86C28.1363 19.0129 28.449 19.2714 28.668 19.6027C28.8871 19.9339 29.0026 20.3229 28.9998 20.72V26C28.9998 26.7956 28.6837 27.5587 28.1211 28.1213C27.5585 28.6839 26.7954 29 25.9998 29ZM5.99976 5C5.73454 5 5.48019 5.10536 5.29265 5.29289C5.10512 5.48043 4.99976 5.73478 4.99976 6V6.08C5.45976 12 8.40976 26 25.9398 27C26.0711 27.0081 26.2028 26.9902 26.3273 26.9473C26.4517 26.9045 26.5665 26.8374 26.6649 26.7501C26.7634 26.6628 26.8437 26.5568 26.9011 26.4384C26.9586 26.32 26.9921 26.1914 26.9998 26.06V20.72L23.2298 19.21L20.3598 22.06L19.8798 22C11.1798 20.91 9.99976 12.21 9.99976 12.12L9.93976 11.64L12.7798 8.77L11.2798 5H5.99976Z"
                      fill="black"
                    />
                  </svg>
                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 32 32"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M28 6H4C3.46957 6 2.96086 6.21071 2.58579 6.58579C2.21071 6.96086 2 7.46957 2 8V24C2 24.5304 2.21071 25.0391 2.58579 25.4142C2.96086 25.7893 3.46957 26 4 26H28C28.5304 26 29.0391 25.7893 29.4142 25.4142C29.7893 25.0391 30 24.5304 30 24V8C30 7.46957 29.7893 6.96086 29.4142 6.58579C29.0391 6.21071 28.5304 6 28 6ZM25.8 8L16 14.78L6.2 8H25.8ZM4 24V8.91L15.43 16.82C15.5974 16.9361 15.7963 16.9984 16 16.9984C16.2037 16.9984 16.4026 16.9361 16.57 16.82L28 8.91V24H4Z"
                      fill="black"
                    />
                  </svg>

                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 16 16"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <g clip-path="url(#clip0)">
                      <path
                        d="M13.601 2.32605C12.8675 1.58573 11.9939 0.998793 11.0313 0.599454C10.0687 0.200115 9.03617 -0.00364427 7.994 4.93305e-05C3.627 4.93305e-05 0.068 3.55805 0.064 7.92605C0.064 9.32505 0.43 10.686 1.121 11.891L0 16L4.204 14.898C5.367 15.531 6.66993 15.8627 7.994 15.863H7.998C12.366 15.863 15.924 12.305 15.928 7.93305C15.929 6.89109 15.7238 5.85924 15.3243 4.89693C14.9247 3.93462 14.3387 3.06088 13.6 2.32605H13.601ZM7.994 14.521C6.813 14.5214 5.6537 14.2036 4.638 13.601L4.398 13.457L1.904 14.111L2.57 11.6781L2.414 11.427C1.75381 10.3774 1.40465 9.16208 1.407 7.92205C1.407 4.29605 4.364 1.33805 7.998 1.33805C8.86374 1.3365 9.72123 1.50632 10.521 1.83774C11.3208 2.16916 12.0471 2.65561 12.658 3.26905C13.271 3.8801 13.757 4.60647 14.0879 5.40628C14.4188 6.20609 14.5881 7.06349 14.586 7.92905C14.582 11.568 11.625 14.521 7.994 14.521V14.521ZM11.609 9.58705C11.412 9.48805 10.439 9.00905 10.256 8.94105C10.074 8.87605 9.941 8.84205 9.811 9.04005C9.678 9.23705 9.298 9.68605 9.184 9.81505C9.07 9.94805 8.952 9.96305 8.754 9.86505C8.557 9.76505 7.918 9.55705 7.162 8.88005C6.572 8.35505 6.177 7.70505 6.059 7.50805C5.945 7.31005 6.048 7.20405 6.147 7.10505C6.234 7.01705 6.344 6.87305 6.443 6.75905C6.543 6.64505 6.576 6.56105 6.641 6.42905C6.706 6.29505 6.675 6.18105 6.626 6.08205C6.576 5.98305 6.181 5.00605 6.014 4.61205C5.854 4.22305 5.691 4.27705 5.569 4.27205C5.455 4.26505 5.322 4.26505 5.189 4.26505C5.08856 4.26755 4.98973 4.29078 4.89869 4.33328C4.80766 4.37579 4.7264 4.43665 4.66 4.51205C4.478 4.71005 3.969 5.18905 3.969 6.16605C3.969 7.14305 4.679 8.08205 4.779 8.21505C4.877 8.34805 6.173 10.347 8.162 11.207C8.632 11.412 9.002 11.533 9.291 11.625C9.766 11.777 10.195 11.754 10.537 11.705C10.917 11.647 11.708 11.225 11.875 10.762C12.039 10.298 12.039 9.90205 11.989 9.81905C11.94 9.73505 11.807 9.68605 11.609 9.58705V9.58705Z"
                        fill="black"
                      />
                    </g>
                    <defs>
                      <clipPath id="clip0">
                        <rect width="16" height="16" fill="white" />
                      </clipPath>
                    </defs>
                  </svg>
                </div>
                <div>
                  <a onClick={Delete}>Remove</a>
                </div>
              </div>
            </div>
          )
        ) : (
          <div className="No_docs">
            <div>
              <img src={NoDoc} />
              <h3>No Doctors Added</h3>
            </div>
          </div>
        )}
      </div>
    </>
  );
}
